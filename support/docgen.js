/**
 * This script generates the supported devices page.
 * 
 */

const deviceMapping = require('../lib/devices').devices;
const deviceMappingConverters = require('zigbee-herdsman-converters').devices;
const findByZigbeeModel = require('zigbee-herdsman-converters').findByZigbeeModel;
const fs = require('fs');
const outputdir = process.argv[2];

if (!outputdir) {
    console.error("Please specify an output directory");
}

let file = 'Supported-devices.md';
let text = '*NOTE: Automatically generated by `npm run docgen`* \n \n';

const logDevices = (devices) => {
    let result = '';

    devices = new Map(devices.map((d) => [d.zigbeeModels, d]));
    devices.forEach((device) => {
        var pathImg  = device.icon.replace(new RegExp("img/", "g"), '').replace(new RegExp(".png", "g"), '');
        var brand, models = [];
        device.zigbeeModels.forEach((modelId) => {
            const mappedModel = findByZigbeeModel(modelId);
            const re = /[^\x20-\x7E]+/g;
            const model = modelId.replace(re, " ");
            const desc = mappedModel ? `${mappedModel.description} (${mappedModel.supports})` : `${model}`;
            const name = mappedModel ? `**${mappedModel.model}**<br>` : ``;
            if (brand == undefined) {
                brand= {
                    name: name,
                    desc: desc,
                    pathImg: pathImg,
                };
            }
            models.push(model);
        });
        var modelsStr = models.join(', ');
        result += `| ${brand.name} (${modelsStr}) | ${brand.desc} |  ![${brand.pathImg}]` + '(https://github.com/ioBroker/ioBroker.zigbee/blob/master/admin/' + `${device.icon}) |\n`;
    });

    return result;
}

const vendors = Array.from(new Set(deviceMapping.map((d) => d.vendor)));
vendors.sort();
text += '|  Model | Description | Picture |\n';
text += '| ------------- | ------------- | -------------------------- |\n';
vendors.forEach((vendor) => {
    text += `|  | **${vendor}**  |   |\n`;   
    text += logDevices(deviceMapping.filter((d) => d.vendor === vendor));
})

fs.writeFileSync(outputdir + '/' + file, text);
