/**
 * This script generates the supported devices page.
 * 
 */


const deviceMapping = require('../lib/devstates').devices;
const deviceMappingConverters = require('zigbee-shepherd-converters').devices;
const fs = require('fs');
const outputdir = process.argv[2];
//const outputdir = '/opt/iobroker/node_modules/iobroker.zigbee/support/';


if (!outputdir) {
    console.error("Please specify an output directory");
}

let file = 'Supported-devices.md';
let text;
text += '*NOTE: Automatically generated by `npm run docgen`* \n \n';

const logDevices = (devices) => {
    let result = '';

    devices = new Map(devices.map((d) => [d.models, d]));
    devices.forEach((device) => {       
        var pathImg  = device.icon.replace(new RegExp("img/", "g"), '').replace(new RegExp(".png", "g"), '');      
        result += `| **${device.vendor}** | ${device.models} |  ![${pathImg}]` + '(https://github.com/ioBroker/ioBroker.zigbee/blob/master/admin/' + `${device.icon}) |\n`;
    });

    return result;
}


const vendors = Array.from(new Set(deviceMappingConverters.map((d) => d.vendor)));
text += '|  Brand | Model | Picture |\n';
text += '| ------------- | ------------- | -------------------------- |\n';
vendors.forEach((vendor) => {
    text += `| **${vendor}** |    |   |\n`;   
    text += logDevices(deviceMapping.filter((d) => d.vendor === vendor));
})

fs.writeFileSync(outputdir + '/' + file, text);

